---
import PageDates from '$lib/lib/zoihuc/ZhcPageDates';
import ClsZhcReferenceList from '$lib/lib/zoihuc/classes/ClsZhcReferenceList';
import type IntfFrontmatter from '$lib/lib/zoihuc/interfaces/IntfZhcFrontmatter';
import Zoihuc from '$lib/layouts/Zoihuc.astro';
import ZhcReference from '$lib/components/zoihuc/ZhcReference.astro';
import ZhcReferenceLink from '$lib/components/zoihuc/ZhcReferenceLink.astro';

export const frontmatter: IntfFrontmatter = {
	title: 'ChatGPT のチャット履歴を記録する方法の検討',
	pageDates: new PageDates('2025-03-14', '2025-03-27'),
	description: 'ChatGPTのチャット履歴をローカルに記録する方法を考える。',
	tags: ['Astro', 'ChatGPT'],
};

const referenceList = new ClsZhcReferenceList([
	{
		key: 'zeroJavaScript',
		title: 'Components | Docs',
		sitename: 'Astro Docs',
		link: 'https://docs.astro.build/en/basics/astro-components/',
		date: '2025-03-27',
	},
]);
---

<Zoihuc {frontmatter} visibleTags={true} visibleFooter={false}>
	<main>
		<article>
			<section>
				<h2>経緯</h2>
				<p>
					以下の理由により Chat GPT のチャット履歴をローカルに保存することにした。
				</p>

				<h3>理由1: ローカルに保存したい</h3>
				<p>
					OpenAI のサービス変更や終了によって、ChatGPT
					のエクスポート機能が削除されたり、チャット履歴の閲覧自体ができなくなる可能性がある。また、エクスポート機能がなくなると、過去の履歴を簡単に取得する方法が制限されるため、必要な履歴をローカルに保存しておきたい。
				</p>

				<h3>理由2: 追記したい</h3>
				<p>
					入力内容や GPT
					の回答に誤りや不足がないかを検証し、必要に応じて出典や補足情報を加筆したい。
				</p>
			</section>

			<section>
				<h2>ローカルに記録する方法を考える</h2>

				<h3>方法1: エクスポート機能を使う</h3>
				<p>
					ChatGPT
					にはチャット履歴をすべてエクスポートする機能がある。ただし、エクスポートされた履歴は
					Markdown に近い書式だが、1つの HTML
					ファイルにまとめられるため、過去の履歴を整理・編集しづらい。
				</p>

				<h3>方法2: 記録と装飾を手動で行う</h3>
				<p>
					ChatGPT のエクスポート機能の代わりに手動で HTML と CSS
					を編集することで装飾、整理、記録する方法もある。こちらは前者に比べ手間はかかるが、読みやすさと拡張性（追記のしやすさ）は高い。
				</p>

				<h3>手動で記録する</h3>
				<p>最終的に読みやすさと拡張性から手動で記録する方法を選んだ。</p>
			</section>

			<section>
				<h2>実装方法の検討</h2>

				<h3>HTML と CSS を使う</h3>
				<p>
					今回は HTML と CSS のみで構成し、JavaScript
					は埋め込まない。理由は二つあり、一つは JavaScript
					を実行できない環境（テキストブラウザや一部の電子書籍リーダー、HTML
					ビューアなど）でも閲覧可能にするため、もう一つは PDF
					などの静的なフォーマットに変換しやすくするためだ。
				</p>

				<h3>チャットごとにファイルを分ける</h3>
				<p>
					すべての履歴を1つのファイルにまとめるのではなく、チャットごとに個別の
					HTMLファイルを作成する。こうすることで、それぞれのチャットを管理しやすくなる。
				</p>

				<h3>SSG（静的サイトジェネレーター）</h3>
				<p>
					チャットの記録は「ユーザの入力」と「GPT
					の回答」という決まったフォーマットで構成されており、共通するパーツが多い。これらをコンポーネント化して再利用することで作業の効率が向上する。
					また、SSG
					を用いることで、フォーマットやスタイルの変更を一括で適用できるため、大量の
					HTML ファイルを扱う場合に特に有用だ。
				</p>

				<h3>Astro を採用</h3>
				<p>
					今回の構成では JavaScript を使用しないため、デフォルトで JavaScript
					を埋め込まない<ZhcReferenceLink
						index={referenceList.searchIndex('zeroJavaScript')}
					/> Astro を使用することにした。
				</p>

				<h3>実装へ</h3>
				<p>次回から Astro を使って実装を進めていく。</p>
			</section>
		</article>

		<ZhcReference references={referenceList.references} />
	</main>
</Zoihuc>
